################
### LANGUAGE ###
################

# Language options
language:
  # The default locale to use for in-game messages. Locales are searched for in the "lang" folder. For example, "en_US"
  # should be located at "plugins/Chatterbox/lang/en_US.properties"
  locale: "en_US"

###############
### FORMATS ###
###############

# These formats have a limited variable scope. These are not passed through the message pipeline; they are only parsed
# by Rythm. This also means that special methods like startJSON are not available.
# The sender variable is guaranteed to be a CommandSender, but nothing more.
# The message variable is guaranteed to be a String.
# Those are the only two variables available.
formats:
  say: "[@(sender.getName())] @(message)"
  action: "* @(sender.getName()) @(message)"

#################
### MESSAGING ###
#################

# Options for messaging (/message and /reply)
messaging:
  # The messaging "channel." All messaging messages are sent through this channel, but they are only ever delivered to
  # the sender and recipient.
  channel:
    # Really the only thing that needs defining in this channel is the format. JSON and recipient sections may be used,
    # but the recipient section is redundant and unnecessary, since there is already a recipient variable.
    format:
      text: '[@(player.getDisplayName()) -> @(recipient.getDisplayName())] @(message)'

##############
### TITLES ###
##############

# Title options. These are ordered from highest importance to least importance.
titles:
  # Titles to apply to individuals
  individuals:
    # UUIDs should only be lowercase
    42ae86b2-ad8c-4ecf-ad49-423b896ef65b:
      prefix: "[Developer]"
      suffix: ""
  # Titles to apply to permission groups, if the Vault hook is installed
  groups:
    Admin:
      prefix: "[Admin]"
      suffix: ""
  # Titles to apply to everyone
  "*":
    prefix: ""
    suffix: ""

###############
### OPTIONS ###
###############

options:
  permissions:
    channels:
      # Check chatterbox.channel.@(channel.getTag()) when attempting to join a channel?
      per-channel: true
  channels:
    membership:
      # The amount of time to wait before clearing out old memberships from channels. When a player joins a channel, the
      # membership is saved, so the player will be in all the same channels when leaving/joining or after a restart. If
      # the player is inactive for long enough, that membership status will be cleared to save memory and prevent
      # clutter.
      remove_after:
        amount: 10
        unit: DAYS

##############
### MASTER ###
##############

# Master options. These act as default values for channels. If an option is not specified in a channel, the value from
# here will be used. Note that the "name" and "tag" options cannot be set here; each channel MUST provide its own
# values for those options.
master:
  # Variables MUST be entirely lowercase.
  # The format for messages in this channel.
  format:
    text: '@(chatterbox.startJSON("display-name"))@(playerName)@(chatterbox.endJSON("display-name")): @(message)'
    json:
      display-name: |
                    Display name:%n
                    @(playerDisplayName)
  # If a channel is permanent, it will always be joined by every player, and it can never be left. This is useful for
  # channels that are intended to be global.
  permanent: false
  # These are the radius options
  radius:
    # If this is set to false, the horizontal and vertical options will be ignored, but the defaults are listed.
    enabled: false
    # The horizontal radius in which to broadcast the message
    horizontal: 0.0
    # The vertical radius in which to broadcast the message
    vertical: 0.0
  # Maximum options
  maximum:
    # The maximum amount of members allowed to join this channel. 0 means unlimited.
    members: 0
  # World options
  worlds:
    # Should the message be broadcast to all worlds?
    all: true
    # Should the message be broadcast to the world the player is in?
    self: true
    individual:
      # Should the message be broadcast to the given world name?
      # world: true

################
### CHANNELS ###
################

# The first listed channel will become the default channel. The default channel will be joined if no other channels
# are joined by a player. Permanent channels will be joined first, then the default channel will be joined if the player
# is still not joined in any channel.
# NOTE: If you only want one, main channel for all chat on your server, simply create one, all-worlds, no-radius,
# permanent channel. It will become the default if listed first, thereby forcing everyone to use it.
channels:
  # This is the default, permanent channel. Again, any values not specified here are copied from the master values
  # above.
    # This is the name of the channel. It may be used in commands to reference this channel. This MAY contain spaces.
  - name: Default
    # This is the tag for the channel. It may be used in commands and @-tags to reference this channel. This MAY NOT
    # contains spaces.
    tag: d
    # Make this channel permanent so that everyone must be in it.
    permanent: true
  # A local channel. Notice that several options are not included, as the defaults match the desired functionality.
  - name: local
    tag: l
    radius:
      enabled: true
      horizontal: 36.0
      vertical: 18.0
    worlds:
      all: false
  - name: Recipient
    tag: r
    format:
      text: '@(player.getName()) -> @(chatterbox.recipient("name")): @(message)'
      recipient:
        name: '@(recipient.getName())'
  # This channel uses the Rythm engine (all channels do) to determine the chat format
  - name: Rythm format
    tag: rf
    format:
      text: '[@(chatterbox.startJSON("channel"))@(channel.getTag())@(chatterbox.endJSON("channel"))]
             @(chatterbox.startJSON("player-info"))@(player.getDisplayName())@(chatterbox.endJSON("player-info")):
             @(message.capFirst())'
      json:
        # @chatterbox.doNotRender() is a special method that prints out a special string that indicates that this line
        # should be ignored.
        # channel.getName().equals(channel.getTag()) is equivalent, but using s() is null-safe
        # Here, Rythm's len() is used, to get the length of the members, regardless of if they're contained in an array
        # or a collection.
        channel: |
                 &9&lChannel%n
                 @if (!s().eq(channel.getName(), channel.getTag())) {
                     &9Name: &7@channel.getName()%n
                 }
                 &9Members: &7@channel.getMembers().len()
        # @chatterbox.cancelJSON() outputs a special string that completely disables the current JSON segment. If the
        # player's real name is the same as his display name, this whole JSON segment should not be included in the
        # final result.
        player-info: |
                     &9&lPlayer%n
                     @if (s().eq(player.getDisplayName(), player.getName())) {
                         @chatterbox.cancelJSON()
                     } else {
                         &9Real name: &7@player.getName()
                     }
  - name: Rythm in a file
    tag: rif
    format:
      # Specifies that the Rythm for the format is in plugins/Chatterbox/rif.txt. These files may use templates and
      # anything available to Rythm. They are cached for an hour from their last access. Files are read with linebreaks
      # as spaces to mimic the behavior seen in this file.
      file: rif.txt
      json:
        channel: |
                 &9&lChannel%n
                 @channel.getName()

################
### ADVANCED ###
################

# Don't touch these if you don't know what you're doing.

dependencies:
  vault:
    install: true
    overwrite: true
